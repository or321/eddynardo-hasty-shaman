// Generated by Haxe 4.3.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Bat = function() {
	this.varticalPathCycleOffset = 0;
	this.varticalPathCycleTime = 2;
	this.varticalPathRadiusLength = 2;
	this.horizontalPathCycleOffset = 0;
	this.horizontalPathCycleTime = 5;
	this.horizontalPathRadiusLength = 0;
	this.height = 17;
	this.width = 16;
};
Bat.__name__ = true;
Bat.copy = function(bat) {
	var newBat = new Bat();
	newBat.positionX = bat.positionX;
	newBat.positionY = bat.positionY;
	if(bat.width != null) {
		newBat.width = bat.width;
	}
	if(bat.height != null) {
		newBat.height = bat.height;
	}
	if(bat.horizontalPathRadiusLength != null) {
		newBat.horizontalPathRadiusLength = bat.horizontalPathRadiusLength;
	}
	if(bat.horizontalPathCycleTime != null) {
		newBat.horizontalPathCycleTime = bat.horizontalPathCycleTime;
	}
	if(bat.horizontalPathCycleOffset != null) {
		newBat.horizontalPathCycleOffset = bat.horizontalPathCycleOffset;
	}
	if(bat.varticalPathRadiusLength != null) {
		newBat.varticalPathRadiusLength = bat.varticalPathRadiusLength;
	}
	if(bat.varticalPathCycleTime != null) {
		newBat.varticalPathCycleTime = bat.varticalPathCycleTime;
	}
	if(bat.varticalPathCycleOffset != null) {
		newBat.varticalPathCycleOffset = bat.varticalPathCycleOffset;
	}
	return newBat;
};
Bat.prototype = {
	toLayoutComponent: function() {
		return [[this.positionX,this.positionY,0,this.width,this.height,0,0,1,0.5,1,0,0,[]],40,1392,[[0]],[[1,0,0,this.horizontalPathCycleTime,0,this.horizontalPathCycleOffset,0,this.horizontalPathRadiusLength,0],[1,1,0,this.varticalPathCycleTime,0,this.varticalPathCycleOffset,0,this.varticalPathRadiusLength,0],[1,7,0,2,0,0,1,15,0],[0,0,0.01,0.3,1]],[0,"Bat",0,1]];
	}
};
var Camera = function() {
};
Camera.__name__ = true;
Camera.copy = function(camera) {
	var newCamera = new Camera();
	return newCamera;
};
Camera.prototype = {
	toLayoutComponent: function() {
		return [[160,90,0,56,65,0,0,1,0.5,0.4923076927661896,0,0,[]],24,102,[[1],[1],[0],[0]],[[1]],[1,"Default",0,1]];
	}
};
var Chest = function() {
	this.height = 16;
	this.width = 16;
};
Chest.__name__ = true;
Chest.copy = function(chest) {
	var newChest = new Chest();
	newChest.positionX = chest.positionX;
	newChest.positionY = chest.positionY;
	if(chest.width != null) {
		newChest.width = chest.width;
	}
	if(chest.height != null) {
		newChest.height = chest.height;
	}
	return newChest;
};
Chest.prototype = {
	toLayoutComponent: function() {
		return [[this.positionX,this.positionY,0,this.width,this.height,0,0,1,0.5,1,0,0,[]],21,1345,[],[],[0,"Default",0,1]];
	}
};
var CustomLevelsHandler = function() {
	window.customLevelsHandler = this;
	var pageUrl = new URL($global.location.href);
	var levelPackFileName = pageUrl.searchParams.get("pack");
	if(levelPackFileName == null) {
		levelPackFileName = "default";
	}
	this.loadCustomLevelsFromFile(levelPackFileName);
};
CustomLevelsHandler.__name__ = true;
CustomLevelsHandler.prototype = {
	loadCustomLevelsFromFile: function(levelPackFileName) {
		var _gthis = this;
		var levelPackUrl = $global.location.origin + "/custom_level_packs/" + levelPackFileName + ".json?" + new Date().getTime();
		var http = new haxe_http_HttpJs(levelPackUrl);
		this.loading = true;
		http.onData = function(levelPackData) {
			var loadedLevels = JSON.parse(levelPackData);
			var result = new Array(loadedLevels.length);
			var _g = 0;
			var _g1 = loadedLevels.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = Level.copy(loadedLevels[i]);
			}
			_gthis.levels = result;
			_gthis.loading = false;
		};
		http.onError = function(error) {
			_gthis.loadCustomLevelsFromFile("default");
		};
		http.request();
	}
};
function Direction_directionAngle(direction) {
	switch(direction) {
	case 0:
		return 0;
	case 1:
		return 1.570796326794896;
	case 2:
		return 3.141592741012573;
	case 3:
		return 4.712388980384689;
	}
}
var DynamicLevelText = function() {
};
DynamicLevelText.__name__ = true;
DynamicLevelText.copy = function(text) {
	if(text == null) {
		return null;
	}
	var newText = new DynamicLevelText();
	newText.value = text.value;
	newText.width = text.width;
	newText.height = text.height;
	return newText;
};
DynamicLevelText.prototype = {
	toLayoutComponent: function() {
		return [[160,-16,0,this.width,this.height,0,0,1,0.5,0,0,0,[]],55,56,[],[[1,1,0,20,0,15,0,30,0],[0,0,0,0.5,1]],[16,16,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;:?!-_~#\"'&()[]|`\\/@°+=*$£€<>",this.value,0.5,0,1,1,1,0,0,0]];
	}
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var Fire = function() {
	this.height = 12;
	this.width = 8;
};
Fire.__name__ = true;
Fire.copy = function(fire) {
	var newFire = new Fire();
	newFire.positionX = fire.positionX;
	newFire.positionY = fire.positionY;
	if(fire.width != null) {
		newFire.width = fire.width;
	}
	if(fire.height != null) {
		newFire.height = fire.height;
	}
	return newFire;
};
Fire.prototype = {
	toLayoutComponent: function() {
		return [[this.positionX,this.positionY,0,this.width,this.height,0,0,0.699999988079071,0,0.9166666865348816,0,0,[]],13,1372,[],[[0,0,0,0.1,1]],[0,"on",0,1]];
	}
};
var Ghost = function() {
	this.varticalPathCycleOffset = 0;
	this.varticalPathCycleTime = 5;
	this.varticalPathRadiusLength = 5;
	this.horizontalPathCycleOffset = 0;
	this.horizontalPathCycleTime = 2;
	this.horizontalPathRadiusLength = 0;
	this.height = 17;
	this.width = 10;
};
Ghost.__name__ = true;
Ghost.copy = function(ghost) {
	var newGhost = new Ghost();
	newGhost.positionX = ghost.positionX;
	newGhost.positionY = ghost.positionY;
	if(ghost.width != null) {
		newGhost.width = ghost.width;
	}
	if(ghost.height != null) {
		newGhost.height = ghost.height;
	}
	if(ghost.horizontalPathRadiusLength != null) {
		newGhost.horizontalPathRadiusLength = ghost.horizontalPathRadiusLength;
	}
	if(ghost.horizontalPathCycleTime != null) {
		newGhost.horizontalPathCycleTime = ghost.horizontalPathCycleTime;
	}
	if(ghost.horizontalPathCycleOffset != null) {
		newGhost.horizontalPathCycleOffset = ghost.horizontalPathCycleOffset;
	}
	if(ghost.varticalPathRadiusLength != null) {
		newGhost.varticalPathRadiusLength = ghost.varticalPathRadiusLength;
	}
	if(ghost.varticalPathCycleTime != null) {
		newGhost.varticalPathCycleTime = ghost.varticalPathCycleTime;
	}
	if(ghost.varticalPathCycleOffset != null) {
		newGhost.varticalPathCycleOffset = ghost.varticalPathCycleOffset;
	}
	return newGhost;
};
Ghost.prototype = {
	toLayoutComponent: function() {
		return [[this.positionX,this.positionY,0,this.width,this.height,0,0,1,0.5,1,0,0,[]],40,1388,[[0]],[[1,0,0,this.horizontalPathCycleTime,0,this.horizontalPathCycleOffset,0,this.horizontalPathRadiusLength,0],[1,1,0,this.varticalPathCycleTime,0,this.varticalPathCycleOffset,0,this.varticalPathRadiusLength,0],[1,7,0,2,0,0,1,0,0],[0,0,0.01,0.3,1]],[0,"Ghost",0,1]];
	}
};
var GreyBlock = function() {
	this.height = 8;
};
GreyBlock.__name__ = true;
GreyBlock.copy = function(block) {
	var newBlock = new GreyBlock();
	newBlock.positionX = block.positionX;
	newBlock.positionY = block.positionY;
	newBlock.width = block.width;
	if(block.height != null) {
		newBlock.height = block.height;
	}
	return newBlock;
};
GreyBlock.prototype = {
	toLayoutComponent: function() {
		return [[this.positionX,this.positionY,0,this.width,this.height,0,0,0.5,0,0,0,0,[]],50,1150,[],[],[1,"Default",0,1]];
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
var Level = function() {
	this.texture_code = "";
	this.scale = 1;
};
Level.__name__ = true;
Level.copy = function(level) {
	var newLevel = new Level();
	newLevel.name = level.name;
	if(level.scale != null) {
		newLevel.scale = level.scale;
	}
	if(level.texture_code != null) {
		newLevel.texture_code = level.texture_code;
	}
	newLevel.player = Player.copy(level.player);
	var _this = level.bats;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = Bat.copy(_this[i]);
	}
	newLevel.bats = result;
	var _this = level.ghosts;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = Ghost.copy(_this[i]);
	}
	newLevel.ghosts = result;
	var _this = level.fires;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = Fire.copy(_this[i]);
	}
	newLevel.fires = result;
	var _this = level.spikes;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = Spike.copy(_this[i]);
	}
	newLevel.spikes = result;
	var _this = level.chests;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = Chest.copy(_this[i]);
	}
	newLevel.chests = result;
	var _this = level.wall_blocks;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = WallBlock.copy(_this[i]);
	}
	newLevel.wall_blocks = result;
	var _this = level.grey_blocks;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = GreyBlock.copy(_this[i]);
	}
	newLevel.grey_blocks = result;
	var _this = level.yellow_blocks;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = YellowBlock.copy(_this[i]);
	}
	newLevel.yellow_blocks = result;
	var _this = level.purple_blocks;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = PurpleBlock.copy(_this[i]);
	}
	newLevel.purple_blocks = result;
	newLevel.dynamicLevelText = DynamicLevelText.copy(level.dynamicLevelText);
	newLevel.staticLevelText = StaticLevelText.copy(level.staticLevelText);
	newLevel.camera = Camera.copy(level.camera);
	return newLevel;
};
Level.prototype = {
	backgroundLayer: function() {
		return ["BG",0,624342637661101,true,[49,53,69],false,1,1,1,false,false,1,0,0,[[[0,0,0,330.9016723632813,201.7607116699219,0,0,0.4000000059604645,0,0,0,0,[],[213,120,"42x0,171x-1,30x0,4,11x0,171x-1,6x0,97,3x100,4,18x0,4,7x3,4,4x0,171x-1,4x0,97,5x100,97,18x0,97,6x3,98,5x0,171x-1,3x0,97,5x100,3,4,21x0,1,2x3,2x4,5x0,171x-1,3x0,2,2x100,4,26x0,5,3,4,6x0,171x-1,42x0,171x-1,12x0,97,29x0,171x-1,9x0,6,2x3,6,10x0,2,102,4,16x0,171x-1,6x0,4,6x3,2,8x0,2,6x3,5,12x0,171x-1,5x0,99,8x3,99,6x0,97,4x3,1,15x0,171x-1,7x0,6,2x100,6,31x0,171x-1,6x0,4,97,100,5,32x0,171x-1,6x0,5,100,4,33x0,171x-1,28x0,1,13x0,171x-1,2x0,4,24x0,97,2x100,5,11x0,171x-1,2x0,6,2x100,4,15x0,4,5x0,4,2x100,1,11x0,171x-1,0,4,4x100,4,12x0,5,3x100,4,3x0,5,4x100,1,9x0,171x-1,2x0,3x100,5,13x0,4,3x100,6,3x0,4,7x100,5,6x0,171x-1,0,4,3x100,6,14x0,4,4x100,4,2x0,4,2x0,6,2x100,97,7x0,171x-1,0,4,3x100,4,18x0,4,7x0,4,0,4,7x0,171x-1,2x0,4,0,4,37x0,171x-1,42x0,20832x-1"]],23,57,[],[],[0,8,8,0,0,0,0,1]]],[]];
	}
	,wallBlocksLayer: function() {
		var _this = this.wall_blocks;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toLayoutComponent();
		}
		var wallBlocksInstances = result;
		return ["GroundCol",1,405191807692717,true,[255,255,255],true,1,1,1,false,false,1,0,0,wallBlocksInstances,[]];
	}
	,texturesLayer: function() {
		return ["Ground",2,683889757010212,true,[255,255,255],true,1,1,1,false,false,1,0,0,[[[0,0,0,320,192,0,0,1,0,0,0,0,[[0,1,1]],[40,24,this.texture_code]],12,78,[],[],[0,8,8,0,0,0,0,1]]],[]];
	}
	,chestsAndTilesLayer: function() {
		var instances = [];
		var _this = this.chests;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toLayoutComponent();
		}
		instances = instances.concat(result);
		var _this = this.grey_blocks;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toLayoutComponent();
		}
		instances = instances.concat(result);
		var _this = this.yellow_blocks;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toLayoutComponent();
		}
		instances = instances.concat(result);
		var _this = this.purple_blocks;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toLayoutComponent();
		}
		instances = instances.concat(result);
		return ["UnderPlayer",3,427841631151004,true,[255,255,255],true,1,1,1,false,false,1,0,0,instances,[]];
	}
	,enemiesLayer: function() {
		var instances = [];
		var _this = this.bats;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toLayoutComponent();
		}
		instances = instances.concat(result);
		var _this = this.ghosts;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toLayoutComponent();
		}
		instances = instances.concat(result);
		var _this = this.fires;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toLayoutComponent();
		}
		instances = instances.concat(result);
		var _this = this.spikes;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].toLayoutComponent();
		}
		instances = instances.concat(result);
		return ["Enemies",4,213208484116281,true,[255,255,255],true,1,1,1,false,false,1,0,0,instances,[]];
	}
	,playerLayer: function() {
		return ["Player",5,443345487680383,true,[255,255,255],true,1,1,1,false,false,1,0,0,[[[-24,48,0,16,24,0,0,1,0.5,1,0,0,[]],8,1069,[],[[],[0,0,0.8,0.4,1]],[0,"Idle",0,1]],this.player.toLayoutComponent()],[]];
	}
	,overPlayerLayer: function() {
		return ["OverPlayer",6,530797518988833,true,[255,255,255],true,1,1,1,false,false,1,0,0,[],[]];
	}
	,uiLayer: function() {
		var instances = [this.camera.toLayoutComponent()];
		if(this.dynamicLevelText != null) {
			instances.push(this.dynamicLevelText.toLayoutComponent());
		}
		if(this.staticLevelText != null) {
			instances.push(this.staticLevelText.toLayoutComponent());
		}
		return ["UI",7,581021616472218,true,[255,255,255],true,1,1,1,false,false,1,0,0,instances,[]];
	}
	,fullScreenFXLayer: function() {
		return ["FullScreenFX",8,176465583991634,true,[255,255,255],true,1,1,1,false,false,1,0,0,[[[296,16,0,22,14,0,0,0.6000000238418579,0,1,0,0,[]],37,144,[],[],[0,"Default",0,1]],[[8,8,0,64,24,0,0,1,0,0,0,0,[]],33,75,[],[[1,1,0,0,0]],[16,16,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;:?!-_~#\"'&()[]|`\\/@°+=*$£€<>","Text",0.25,0,0,0,0,0,0,0]],[[248,16,0,45,14,0,0,0.6000000238418579,0,1,0,0,[]],36,95,[],[],[0,"Default",0,1]],[[304,-16,0,29,14,0,0,0.6000000238418579,0,1,0,0,[]],38,147,[],[],[0,"Default",0,1]],[[152,80,0,368,250,0,0,1,0.5,0.5,0,0,[]],35,92,[],[[1,0,0,0.5,1]],[0,"Default",0,1]],[[41,2,0,88,16,0,0,0.5,0,0,0,0,[]],43,916,[],[],[16,16,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;:?!-_~#\"'&()[]|`\\/@°+=*$£€<>","123456789",0.5,0,0,1,0,0,-2,0]],[[32,208,0,50,14,0,0,0.800000011920929,0.5012787580490112,0.5045871734619141,0,0,[]],45,1008,[],[],[0,"Default",0,1]]],[]];
	}
	,toLevelLayoutData: function() {
		return [this.name,320,180,true,"LevelCode",572186813770178,[this.backgroundLayer(),this.wallBlocksLayer(),this.texturesLayer(),this.chestsAndTilesLayer(),this.enemiesLayer(),this.playerLayer(),this.overPlayerLayer(),this.uiLayer(),this.fullScreenFXLayer()],[],[]];
	}
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var customLevelsHandler = new CustomLevelsHandler();
};
Math.__name__ = true;
var Player = function() {
};
Player.__name__ = true;
Player.copy = function(player) {
	var newPlayer = new Player();
	newPlayer.positionX = player.positionX;
	newPlayer.positionY = player.positionY;
	return newPlayer;
};
Player.prototype = {
	toLayoutComponent: function() {
		return [[this.positionX,this.positionY,0,10,15,0,0,0.5,0.5,1,0,0,[]],9,1321,[[0],[0],[0],[1],["No Spell"],[1],[40],[1],[0],[1],[0],[0]],[[80,1500,1500,130,350,1000,0,0,0,1]],[1,"Default",0,1]];
	}
};
var PurpleBlock = function() {
	this.height = 8;
};
PurpleBlock.__name__ = true;
PurpleBlock.copy = function(block) {
	var newBlock = new PurpleBlock();
	newBlock.positionX = block.positionX;
	newBlock.positionY = block.positionY;
	newBlock.width = block.width;
	if(block.height != null) {
		newBlock.height = block.height;
	}
	return newBlock;
};
PurpleBlock.prototype = {
	toLayoutComponent: function() {
		return [[this.positionX,this.positionY,0,this.width,this.height,0,0,0.5,0,0,0,0,[]],56,1150,[],[],[1,"Default",0,1]];
	}
};
var Spike = function() {
	this.direction = 0;
	this.height = 11;
	this.width = 13;
};
Spike.__name__ = true;
Spike.copy = function(spike) {
	var newSpike = new Spike();
	newSpike.positionX = spike.positionX;
	newSpike.positionY = spike.positionY;
	if(spike.width != null) {
		newSpike.width = spike.width;
	}
	if(spike.height != null) {
		newSpike.height = spike.height;
	}
	if(spike.direction != null) {
		newSpike.direction = spike.direction;
	}
	return newSpike;
};
Spike.prototype = {
	toLayoutComponent: function() {
		return [[this.positionX,this.positionY,0,this.width,this.height,0,Direction_directionAngle(this.direction),1,0.6153846383094788,0.2727272808551788,0,0,[]],25,1386,[],[],[0,"Default",0,1]];
	}
};
var StaticLevelText = function() {
};
StaticLevelText.__name__ = true;
StaticLevelText.copy = function(text) {
	if(text == null) {
		return null;
	}
	var newText = new StaticLevelText();
	newText.value = text.value;
	newText.positionX = text.positionX;
	newText.positionY = text.positionY;
	newText.width = text.width;
	newText.height = text.height;
	return newText;
};
StaticLevelText.prototype = {
	toLayoutComponent: function() {
		return [[this.positionX,this.positionY,0,this.width,this.height,0,0,1,0,0,0,0,[]],14,46,[],[],[16,16,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;:?!-_~#\"'&()[]|`\\/@°+=*$£€<>",this.value,0.5,0,1,0,0,0,0,0]];
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
var WallBlock = function() {
};
WallBlock.__name__ = true;
WallBlock.copy = function(block) {
	var newBlock = new WallBlock();
	newBlock.positionX = block.positionX;
	newBlock.positionY = block.positionY;
	newBlock.width = block.width;
	newBlock.height = block.height;
	return newBlock;
};
WallBlock.prototype = {
	toLayoutComponent: function() {
		return [[this.positionX,this.positionY,0,this.width,this.height,0,0,1,0,1,0,0,[]],10,1308,[],[[1]],[0,"Default",0,1]];
	}
};
var YellowBlock = function() {
	this.height = 8;
};
YellowBlock.__name__ = true;
YellowBlock.copy = function(block) {
	var newBlock = new YellowBlock();
	newBlock.positionX = block.positionX;
	newBlock.positionY = block.positionY;
	newBlock.width = block.width;
	if(block.height != null) {
		newBlock.height = block.height;
	}
	return newBlock;
};
YellowBlock.prototype = {
	toLayoutComponent: function() {
		return [[this.positionX,this.positionY,0,this.width,this.height,0,0,0.5,0,0,0,0,[]],51,1150,[],[],[1,"Default",0,1]];
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = true;
haxe_http_HttpBase.prototype = {
	onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return $bind(this,this.onData) != this.emptyOnData;
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpJs.__name__ = true;
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		this.responseHeaders = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( _g ) {
				s = null;
			}
			if(s == 0 && js_Browser.get_supported() && $global.location != null) {
				var protocol = $global.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				var headers = r.getAllResponseHeaders().split("\r\n");
				var _g = [];
				var _g1 = 0;
				var _g2 = headers;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(v != "") {
						_g.push(v);
					}
				}
				headers = _g;
				var onreadystatechange = new haxe_ds_StringMap();
				_gthis.responseHeaders = onreadystatechange;
				var _g = 0;
				while(_g < headers.length) {
					var hline = headers[_g];
					++_g;
					var a = hline.split(": ");
					var hname = a.shift();
					var hval = a.length == 1 ? a[0] : a.join(": ");
					hval = StringTools.ltrim(StringTools.rtrim(hval));
					_gthis.responseHeaders.h[hname] = hval;
				}
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postData;
		var _g1 = this.postBytes;
		if(_g == null) {
			if(_g1 == null) {
				uri = null;
			} else {
				var bytes = _g1;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g1 == null) {
			var str = _g;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g = 0;
			var _g1 = this.params;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				var s = p.name;
				var uri1 = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				var s1 = p.value;
				uri = uri1 + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(e.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
CustomLevelsHandler.DEFAULT_FILE_NAME = "default";
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
